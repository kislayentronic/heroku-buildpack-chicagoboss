#!/bin/bash

##
# usage: bin/compile <build-dir> <cache-dir>

set -e
bpdir=$(cd $(dirname $(dirname $0)); pwd)

echo "Parametric Build Directory $1"
echo "Parametric Cache Directory $2"

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
test -z ${build} && exit
cache=$(cd "$2/" && pwd)
test -z ${cache} && exit

echo "Build Directory $1"
echo "Cache Directory $2"

DEFAULT_OTP_VERSION="OTP_R16B01"
if [ -f ${build}/.preferred_otp_version ]; then
    OTP_VERSION=$(cat ${build}/.preferred_otp_version)
fi
ver=${OTP_VERSION:=${DEFAULT_OTP_VERSION}}
tarball=${ver}.tgz
OTP_TARBALL_URL="https://s3.amazonaws.com/heroku-buildpack-erlang/${tarball}"
ERLROOT=${build}/otp
PROFILE=${HOME}/.profile.d

echo "-----> Using Erlang/OTP $ver"

(
    set -e

    # Already cached?
    test -f ${cache}/${tarball} && exit

    rm -rf ${cache}/* # be sure not to build up cruft
    cd ${cache}
    echo "-------> Fetching Erlang/OTP $ver"
    curl -sO ${OTP_TARBALL_URL} || exit 1
)

echo "-------> Unpacking Erlang/OTP $ver"
mkdir -p ${ERLROOT}
tar zxf ${cache}/${tarball} -C ${ERLROOT} --strip-components=2
echo "-------> Installing Erlang/OTP $ver"
ln -s ${ERLROOT} /app/otp
${ERLROOT}/Install -minimal /app/otp

PATH=/app/otp/bin:$PATH
export PATH

mkdir -p ${cache}/deps

if [ -f ${build}/.clean ]; then
    echo "-----> Cleaning depencies (remove .clean) to cache them"
    #rm -Rf ${cache}/deps/*
fi

rsync -ahSD --ignore-errors --force --delete ${cache}/deps/ ${build}/deps/

cd ${build}

mkdir -p ${build}/ebin
echo "Compiling into ${build}/ebin while using ${bpdir}/opt/rebar"
if [ ! -e "rebar" ]; then
  echo "-----> Installing Rebar from buildpack"
  cp ${bpdir}/opt/rebar ./
fi


echo "-----> Building with Rebar"
unset GIT_DIR
./rebar get-deps compile 2>&1 | sed -u 's/^/       /'
if [ ${PIPESTATUS[0]} -ne 0 ]; then
  echo "-----> Build failed"
  exit 1
fi

if [ -f ${bpdir}/opt/otp.sh ]; then
  mkdir -p ${PROFILE}
  cp ${bpdir}/opt/otp.sh ${PROFILE}
fi

cp ${bpdir}/opt/cb_config ./
cp ${bpdir}/opt/start ./

echo "-----> Caching dep builds"
rsync -ahSD --ignore-errors --force --delete ${build}/deps/ ${cache}/deps/
echo "-----> Build succeeded"
